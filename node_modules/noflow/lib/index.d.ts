/// <reference path="../typings/promisify.d.ts" />
import { Middleware, MiddlewareFn, FlowHandler } from "./flow";
import * as http from "http";
import Promise from "yaku";
export interface RoutesListen {
    (): Promise<http.Server>;
    (port: number, hostname?: string, backlog?: number): Promise<http.Server>;
    (port: number, hostname?: string): Promise<http.Server>;
    (path: string): Promise<http.Server>;
    (handle: any): Promise<http.Server>;
}
export interface RoutesClose {
    (): Promise<http.Server>;
}
export declare class Routes extends Array<Middleware> {
    constructor();
    server: http.Server;
    address: () => {
        port: number;
        family: string;
        address: string;
    };
    listen: RoutesListen;
    close: RoutesClose;
}
export declare type Middleware = Middleware;
export interface MiddlewareFn extends MiddlewareFn {
}
export interface Flow {
    (): Routes;
    (...middlewares: Middleware[]): FlowHandler;
}
/**
 * Create an array instance with some handy server helper methods.
 * @example
 * ```js
 * import flow from "noflow"
 * let app = flow();
 * app.push("OK");
 * app.listen(8123).then(() => console.log("started"));
 * ```
 */
declare let flow: Flow;
export default flow;
