/// <reference path="../typings/node.d.ts" />
"use strict";
/*
    For the sake of performance don't use `let` key word here.
 */
var utils_1 = require("./utils");
var http = require("http");
var stream_1 = require("stream");
var yaku_1 = require("yaku");
var STATUS_CODES = http.STATUS_CODES;
/**
 * A promise based function composer.
 * @example
 * Noflow encourages composition.
 * ```js
 * import flow from "noflow"
 * let app = flow();
 * let c = 0;
 * app.push(
 *     $ => $.next(c++),
 *     flow(
 *         $ => $.next(c++),
 *         flow(
 *             $ => $.next(c++),
 *             $ => $.next(c++)
 *         )
 *     ),
 *     $ => $.body = c
 * );
 * app.listen(8123);
 * ```
 */
var flow = function (middlewares) {
    return function (req, res) {
        var $, parentNext, next;
        // If it comes from a http listener, else it comes from a sub noflow.
        if (res) {
            $ = { req: req, res: res, body: null, next: null };
        }
        else {
            $ = req;
            parentNext = $.next;
            req = $.req;
            res = $.res;
        }
        var index = 0;
        // Wrap the next middleware.
        next = $.next = function () {
            var mid = middlewares[index++];
            if (mid === undefined) {
                // TODO: #4
                if (parentNext) {
                    return parentNext();
                }
                else {
                    return yaku_1.default.resolve(error404($));
                }
            }
            var ret = tryMid(ensureMid(mid), $);
            // Check if the fn has thrown error.
            if (ret === tryMid) {
                return yaku_1.default.reject(tryMidErr);
            }
            else {
                return yaku_1.default.resolve(ret);
            }
        };
        // Begin the initial middleware.
        var promise = next();
        // The root middleware will finnally end the entire $ peacefully.
        if (!parentNext) {
            return promise
                .then(function () { return endCtx($); })
                .then(undefined, function (err) { return errorAndEndCtx(err, $); });
        }
        return promise;
    };
};
// Convert anything to a middleware function.
function ensureMid(mid) {
    if (utils_1.isFunction(mid))
        return mid;
    return function ($) { $.body = mid; };
}
// for better performance, hack v8.
var tryMidErr;
function tryMid(fn, $) {
    try {
        return fn($);
    }
    catch (err) {
        tryMidErr = err;
        return tryMid;
    }
}
function endRes($, data, isStr) {
    var buf;
    if (isStr) {
        buf = new Buffer(data);
    }
    else {
        buf = data;
    }
    if (!$.res.headersSent) {
        $.res.setHeader("Content-Length", buf.length);
    }
    $.res.end(buf);
}
function setStatusCode(res, code) {
    if (res.statusCode === 200)
        res.statusCode = code;
}
function endEmpty(res) {
    setStatusCode(res, 204);
    res.end();
}
function endCtx($) {
    var body = $.body;
    var res = $.res;
    switch (typeof body) {
        case "string":
            endRes($, body, true);
            break;
        case "object":
            if (body == null) {
                endEmpty(res);
            }
            else if (body instanceof stream_1.Stream) {
                body.pipe(res);
            }
            else if (body instanceof Buffer) {
                endRes($, body);
            }
            else if (utils_1.isFunction(body.then)) {
                return body.then(function (data) {
                    $.body = data;
                    return endCtx($);
                });
            }
            else {
                if (!$.res.headersSent && !res.getHeader("content-type")) {
                    res.setHeader("Content-Type", "application/json; charset=utf-8");
                }
                endRes($, JSON.stringify(body), true);
            }
            break;
        case "undefined":
            endEmpty(res);
            break;
        default:
            endRes($, body.toString(), true);
            break;
    }
}
function errorAndEndCtx(err, $) {
    setStatusCode($.res, 500);
    if (process.env.NODE_ENV === "production") {
        $.body = STATUS_CODES[$.res.statusCode];
    }
    else {
        // print the error details
        if (err instanceof Error)
            $.body = err.stack;
        else
            $.body = err + "";
    }
    // end the context
    return endCtx($);
}
function error404($) {
    setStatusCode($.res, 404);
    $.body = STATUS_CODES[$.res.statusCode];
}
function default_1(middlewares) {
    // Make sure we pass in an array
    if (!utils_1.isArray(middlewares)) {
        middlewares = [].slice.call(arguments);
    }
    return flow(middlewares);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
;
